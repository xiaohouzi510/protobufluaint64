// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class SSInt64Test;

// ===================================================================

class SSInt64Test : public ::google::protobuf::Message {
 public:
  SSInt64Test();
  virtual ~SSInt64Test();

  SSInt64Test(const SSInt64Test& from);

  inline SSInt64Test& operator=(const SSInt64Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSInt64Test& default_instance();

  void Swap(SSInt64Test* other);

  // implements Message ----------------------------------------------

  SSInt64Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSInt64Test& from);
  void MergeFrom(const SSInt64Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PvpType = 1;
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pvptype() const;
  inline void set_pvptype(::google::protobuf::int32 value);

  // optional int64 TeamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // optional int32 HardType = 3;
  inline bool has_hardtype() const;
  inline void clear_hardtype();
  static const int kHardTypeFieldNumber = 3;
  inline ::google::protobuf::int32 hardtype() const;
  inline void set_hardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSInt64Test)
 private:
  inline void set_has_pvptype();
  inline void clear_has_pvptype();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_hardtype();
  inline void clear_has_hardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 teamid_;
  ::google::protobuf::int32 pvptype_;
  ::google::protobuf::int32 hardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static SSInt64Test* default_instance_;
};
// ===================================================================


// ===================================================================

// SSInt64Test

// optional int32 PvpType = 1;
inline bool SSInt64Test::has_pvptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSInt64Test::set_has_pvptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSInt64Test::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSInt64Test::clear_pvptype() {
  pvptype_ = 0;
  clear_has_pvptype();
}
inline ::google::protobuf::int32 SSInt64Test::pvptype() const {
  return pvptype_;
}
inline void SSInt64Test::set_pvptype(::google::protobuf::int32 value) {
  set_has_pvptype();
  pvptype_ = value;
}

// optional int64 TeamID = 2;
inline bool SSInt64Test::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSInt64Test::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSInt64Test::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSInt64Test::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 SSInt64Test::teamid() const {
  return teamid_;
}
inline void SSInt64Test::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 HardType = 3;
inline bool SSInt64Test::has_hardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSInt64Test::set_has_hardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSInt64Test::clear_has_hardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSInt64Test::clear_hardtype() {
  hardtype_ = 0;
  clear_has_hardtype();
}
inline ::google::protobuf::int32 SSInt64Test::hardtype() const {
  return hardtype_;
}
inline void SSInt64Test::set_hardtype(::google::protobuf::int32 value) {
  set_has_hardtype();
  hardtype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
